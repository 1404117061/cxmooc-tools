// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/CodFrm/cxmooc-tools/server/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: userEntity
func (_m *UserRepository) Create(userEntity *entity.UserEntity) error {
	ret := _m.Called(userEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UserEntity) error); ok {
		r0 = rf(userEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByToken provides a mock function with given fields: token
func (_m *UserRepository) FindByToken(token string) (*entity.UserEntity, error) {
	ret := _m.Called(token)

	var r0 *entity.UserEntity
	if rf, ok := ret.Get(0).(func(string) *entity.UserEntity); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUser provides a mock function with given fields: user
func (_m *UserRepository) FindByUser(user string) (*entity.UserEntity, error) {
	ret := _m.Called(user)

	var r0 *entity.UserEntity
	if rf, ok := ret.Get(0).(func(string) *entity.UserEntity); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
